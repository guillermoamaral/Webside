components:
  schemas:
    style:
      type: object
      description: Text style for a specific token category
      properties:
        color:
          type: string
          description: Color in HEX format (#RRGGBB or #RRGGBBAA for RGBA).
          pattern: "^#(?:[0-9A-Fa-f]{6}|[0-9A-Fa-f]{8})$"
          example: "#204a87"
        italic:
          type: boolean
          description: Whether the text should be italic
          example: true
        bold:
          type: boolean
          description: Whether the text should be bold
          example: true
      additionalProperties: false

    styles:
      type: object
      description: A set of styles for each kind of token. If a style is omitted, a default style will be used
      properties:
        selectorStyle:
          $ref: "#/components/schemas/style"
        symbolStyle:
          $ref: "#/components/schemas/style"
        argumentStyle:
          $ref: "#/components/schemas/style"
        temporaryStyle:
          $ref: "#/components/schemas/style"
        assignmentStyle:
          $ref: "#/components/schemas/style"
        stringStyle:
          $ref: "#/components/schemas/style"
        variableStyle:
          $ref: "#/components/schemas/style"
        metaStyle:
          $ref: "#/components/schemas/style"
        bracketStyle:
          $ref: "#/components/schemas/style"
        reservedStyle:
          $ref: "#/components/schemas/style"
        returnStyle:
          $ref: "#/components/schemas/style"
        globalStyle:
          $ref: "#/components/schemas/style"
        numberStyle:
          $ref: "#/components/schemas/style"
        commentStyle:
          $ref: "#/components/schemas/style"

      additionalProperties: false

    theme:
      type: object
      description: A theme with a name and light/dark styles
      required: [name]
      properties:
        name:
          type: string
          description: Theme name
          example: "Tango"
        light:
          $ref: "#/components/schemas/styles"
        dark:
          $ref: "#/components/schemas/styles"
      additionalProperties: false

    stat:
      type: object
      description: Single statistic entry
      required: [label, value, unit]
      additionalProperties: false
      properties:
        label:
          type: string
          description: Human-readable name of the metric
          example: Old Space
        value:
          type: number
          format: double
          description: Numeric value of the metric
          example: 149.0703125
        unit:
          type: string
          description: Unit for the value (e.g., mb, kb, gb, %)
          example: mb

    icon:
      type: object
      description: A named PNG icon encoded as Base64.
      required: [name, data]
      additionalProperties: false
      properties:
        name:
          type: string
          description: Logical icon name used by the IDE.
          example: class
        data:
          type: string
          format: byte
          description: PNG image data encoded in Base64.
          example: "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9h..."

    object:
      type: object
      description: Common properties for all objects in the system
      required:
        - class
        - hasNamedSlots
        - hasIndexedSlots
        - size
        - printString
      properties:
        class:
          type: string
          description: The class name of the object
        hasNamedSlots:
          type: boolean
          description: Whether the object has named slots
        hasIndexedSlots:
          type: boolean
          description: Whether the object has indexed slots
        size:
          type: number
          description: The size of the object
        printString:
          type: string
          description: String representation of the object

    method:
      type: object
      description: A Smalltalk method with optional decorations
      additionalProperties: false
      properties:
        selector:
          type: string
          description: Method selector
          example: rounded
        methodClass:
          type: string
          description: Method class
          example: RectangleN
        category:
          type: string
          description: Method category (protocol)
          example: testing
        source:
          type: string
          description: Method source code
        author:
          type: string
          description: Author of the last change
          example: Guille
        timestamp:
          type: string
          description: Timestamp of the last change (format may vary by dialect)
          example: "2025-09-19T15:04:05Z"
        package:
          type: string
          description: Package name
          example: Kernel
        needsRecompilation:
          type: boolean
          description: Specifies whether the last compilation of method has any issue, for instance, when a instance variable was removed from the class definition and a method accessing it should be revised and recompiled. This mark is used to color the method differently to bring developers attention
        overriding:
          type: boolean
          description: Whether this method overrides an inherited one
        overriden:
          type: boolean
          description: Whether this method is overridden downstream
        bytecodes:
          type: string
          description: Bytecode dump (included only if requested)
        disassembly:
          type: string
          description: Disassembly listing (included only if requested)
        ast:
          $ref: "#/components/schemas/astNode"
        annotations:
          type: array
          items:
            $ref: "#/components/schemas/annotation"
        modified:
          type: boolean
          description: Whether the method was modified in the current session
        status:
          type: string
          description: Last test run result, if applicable
          enum: [passed, failed, error]
      required: [selector, methodClass, source]

    astNode:
      type: object
      description: Simplified version of the method's abstract syntax tree used for some functionalities
      properties:
        type:
          type: string
          description: Node type (dialect-dependent)
          example: Selector
        label:
          type: string
          description: Optional label for the node
        start:
          type: number
          description: Start offset in the source
          example: 10
        end:
          type: number
          description: End offset in the source
          example: 38
        value:
          type: string
          description: Literal/identifier/selector value for leaf nodes
          example: messageThatHasNoImplementors
        children:
          type: array
          items:
            $ref: "#/components/schemas/astNode"
      required: [type, start, end]

    annotation:
      type: object
      description: Code annotation (used for linting/marking ranges)
      properties:
        type:
          type: string
          enum: [warning, error]
          description: Annotation type
        description:
          type: string
          description: Human-readable message
        start:
          type: number
          description: Range start (offset in source)
        end:
          type: number
          description: Range end (offset in source)
      required: [type, description, start, end]

    class:
      type: object
      description: A Smalltalk class definition
      required:
        - name
        - definition
        - superclass
        - comment
        - category
        - variable
        - package
      properties:
        name:
          type: string
          description: The class name
        definition:
          type: string
          description: The class definition source code
        superclass:
          type: string
          description: The superclass name
        comment:
          type: string
          description: The class comment
        category:
          type: string
          description: The class category
        variable:
          type: boolean
          description: Whether this is a variable class
        package:
          type: string
          description: The package containing this class
        iconName:
          type: string
          description: Icon name associated with the class
        modified:
          type: boolean
          description: Whether the class was modified in the current session

    variable:
      type: object
      description: A variable of a class (instance or class side)
      properties:
        name:
          type: string
          description: The variable name
        type:
          type: string
          enum: [instance, class]
          description: Annotation type
        class:
          type: string
          description: The class where the variable is defined
      required: [name, type, class]

    package:
      type: object
      description: A package
      properties:
        name:
          type: string
          description: The package name
        classes:
          type: array
          description: The names of classes in the package
          items:
            type: string
        methods:
          type: object
          description: Map from class name to a list of selector strings
          additionalProperties:
            type: array
            items:
              type: string
              description: Selector of the method
        categories:
          type: array
          description: List of class categories in the package
          items:
            type: object
            additionalProperties: false
            required: [name, package]
            properties:
              name:
                type: string
              package:
                type: string
        iconName:
          type: string
          description: Icon name associated with the package
        modified:
          type: boolean
          description: Whether the package was modified in the current session
      required: [name, type, class]

    searchResult:
      type: object
      description: Search result
      properties:
        type:
          type: string
          enum: [project, class, selector, method, pool]
          description: The type of the element found
        text:
          type: string
          description: The text representing the element found
      required: [type, text]

    autocompletionRequest:
      type: object
      additionalProperties: false
      required: [source, position]
      properties:
        source:
          type: string
          description: Full source text where completion is requested
        position:
          type: integer
          minimum: 1
          description: Cursor position within the source
        class:
          type: string
          description: Optional defining class context for the source
      example:
        source: "m\n\t^self messageThatHasNoImpl"
        position: 26
        class: "Number"

    autocompletionResult:
      type: object
      additionalProperties: false
      required: [label, type]
      properties:
        label:
          type: string
          description: Display text for the completion item
          example: "scaleBy:"
        type:
          type: string
          description: Kind of completion item (e.g., variable, selector, method, class, keyword). keyword is used for pseudo variables (true, false and nil)
          enum: [class, method, variable, keyword]
          example: "variable"

    change:
      type: object
      description: A change applied to the system
      required: [type]
      properties:
        type:
          type: string
          enum:
            - AddMethod
            - RemoveMethod
            - ClassifyMethod
            - RenameMethod
            - AddClass
            - CommentClass
            - RemoveClass
            - RenameClass
            - AddClassCategory
            - RenameClassCategory
            - RemoveClassCategory
            - AddInstanceVariable
            - RemoveInstanceVariable
            - RenameInstanceVariable
            - MoveUpInstanceVariable
            - MoveDownInstanceVariable
            - AddClassVariable
            - RemoveClassVariable
            - RenameClassVariable
            - RenameCategory
            - RemoveCategory
            - AddPackage
            - RemovePackage
            - RenamePackage
        timestamp:
          type: string
          format: date-time
          description: When the change was applied
        author:
          type: string
          description: Who made the change
        label:
          type: string
          description: Human-readable label for the change
        package:
          type: string
          description: Package where the change applies
        sourceCode:
          type: string
          description: Source code (if it applies)

    addMethodChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Compile a method in a given class
          required: [className, sourceCode]
          properties:
            className:
              type: string
              description: Target class name
            sourceCode:
              type: string
              description: Method source code
            category:
              type: string
              description: Method category

    removeMethodChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Remove a given method
          required: [className, selector]
          properties:
            className:
              type: string
              description: Target class name
            selector:
              type: string
              description: Selector to remove

    classifyMethodChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Classify a given method under a given category
          required: [className, selector, category]
          properties:
            className:
              type: string
              description: Target class name
            selector:
              type: string
              description: Selector to remove
            category:
              type: string
              description: Category to classify the method under

    renameMethodChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Rename a given selector. The scope is the whole system
          required: [className, selector, newSelector]
          properties:
            className:
              type: string
              description: Target class name
            selector:
              type: string
              description: Selector to rename
            newSelector:
              type: string
              description: New selector

    addClassChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Define a new class or change the definition of an existing one
          required:
            [
              className,
              definition,
              instanceVariables,
              classVariables,
              poolDictionaries,
            ]
          properties:
            className:
              type: string
              description: Target class name
            definition:
              type: string
              description: Class definition
            instanceVariables:
              type: array
              items:
                type: string
              description: Instance variable names
            classVariables:
              type: array
              items:
                type: string
              description: Class variable names
            poolDictionaries:
              type: array
              items:
                type: string
              description: Pool dictionary names

    commentClassChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Change the comment of a given class
          required: [className, comment]
          properties:
            className:
              type: string
              description: Target class name
            comment:
              type: string
              description: Comment to add

    removeClassChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Remove a given class
          required: [className]
          properties:
            className:
              type: string
              description: Target class name

    renameClassChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Rename a given class
          required: [className, newName]
          properties:
            className:
              type: string
              description: Target class name
            newName:
              type: string
              description: New class name
            renameReferences:
              type: boolean
              description: Whether to rename references to the class

    addClassCategoryChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Add a new class category
          required: [category]
          properties:
            category:
              type: string
              description: Category to add

    renameClassCategoryChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Rename a class category
          required: [category, newName]
          properties:
            category:
              type: string
              description: Category to rename
            newName:
              type: string
              description: New category name

    removeClassCategoryChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Remove a class category
          required: [category]
          properties:
            category:
              type: string
              description: Category to remove

    addInstanceVariableChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Add a new instance variable to a given class
          required: [className, variable]
          properties:
            className:
              type: string
              description: Target class name
            variable:
              type: string
              description: Variable to add

    removeInstanceVariableChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Remove an instance variable from a given class
          required: [className, variable]
          properties:
            className:
              type: string
              description: Target class name
            variable:
              type: string
              description: Variable to remove

    renameInstanceVariableChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Rename an instance variable of a given class
          required: [className, variable, newName]
          properties:
            className:
              type: string
              description: Target class name
            variable:
              type: string
              description: Variable to rename
            newName:
              type: string
              description: New variable name

    moveUpInstanceVariableChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Move an instance variable from a given class to its superclass
          required: [className, variable]
          properties:
            className:
              type: string
              description: Source class name
            variable:
              type: string
              description: Variable to move up

    moveDownInstanceVariableChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Move an instance variable from a given class to one of its subclasses
          required: [className, variable, target]
          properties:
            className:
              type: string
              description: Target class name
            variable:
              type: string
              description: Variable to move down
            target:
              type: string
              description: Target class name

    addClassVariableChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Add a new class variable to a given class
          required: [className, variable]
          properties:
            className:
              type: string
              description: Target class name
            variable:
              type: string
              description: Variable to add

    removeClassVariableChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Remove a class variable from a given class
          required: [className, variable]
          properties:
            className:
              type: string
              description: Target class name
            variable:
              type: string
              description: Variable to remove

    renameClassVariableChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Rename a class variable of a given class
          required: [className, variable, newName]
          properties:
            className:
              type: string
              description: Target class name
            variable:
              type: string
              description: Variable to rename
            newName:
              type: string
              description: New variable name

    renameCategoryChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Rename a category
          required: [className, category, newName]
          properties:
            className:
              type: string
              description: Target class name
            category:
              type: string
              description: Category to rename
            newName:
              type: string
              description: New category name

    removeCategoryChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Remove a category
          required: [className, category]
          properties:
            className:
              type: string
              description: Target class name
            category:
              type: string
              description: Category to remove

    addPackageChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Add a new package
          required: [name]
          properties:
            name:
              type: string
              description: Package name

    removePackageChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Remove a package
          required: [name]
          properties:
            name:
              type: string
              description: Package name

    renamePackageChange:
      allOf:
        - $ref: "#/components/schemas/change"
        - type: object
          description: Rename a package
          required: [name, newName]
          properties:
            name:
              type: string
              description: Package name
            newName:
              type: string
              description: New package name

    changeSuggestion:
      type: object
      description: A suggestion to fix an error in a change
      required: [description, changes]
      properties:
        description:
          type: string
          description: Human-readable description of the suggestion
        changes:
          type: array
          items:
            $ref: "#/components/schemas/change"
          description: One or more changes encompassing the suggestion

    changeError:
      type: object
      description: Change error
      required: [description]
      properties:
        description:
          type: string
          description: Error description
        suggestions:
          type: array
          items:
            $ref: "#/components/schemas/changeSuggestion"

    compilationError:
      type: object
      description: Change error
      required: [description, fullDescription, interval]
      properties:
        description:
          type: string
          description: Error description
        suggestions:
          type: array
          items:
            $ref: "#/components/schemas/changeSuggestion"
        fullDescription:
          type: string
          description: Detailed error description
        interval:
          type: object
          properties:
            start:
              type: integer
              minimum: 1
              description: Start position
            end:
              type: integer
              minimum: 1
              description: End position

    evaluationContext:
      type: object
      description: The evaluation context
      oneOf:
        - type: object
          description: The evaluation context is a class
          properties:
            class:
              description: The class name
              type: string
        - type: object
          description: The evaluation context is an object
          properties:
            object:
              description: The object ID
              type: string
        - type: object
          description: The evaluation context is a workspace
          properties:
            workspace:
              description: The workspace ID
              type: string
        - type: object
          description: The evaluation context is a debugger and a frame
          properties:
            debugger:
              description: The debugger ID
              type: string
            frame:
              description: The frame index
              type: number

    evaluationRequest:
      type: object
      description: An evaluation request
      required: [expression, sync, pin, context, debug, profile]
      properties:
        expression:
          type: string
          description: The evaluation expression
        sync:
          type: boolean
          description: Whether to evaluate synchronously. (sync=true) the request is blocked until the evaluation finishes, and the response contains the object resulting from the evaluation, or, (sync=false) the request is immediately responded with the ID of the new evaluation, so the client can follow its progress. This mode allows the client to have control over the evaluation, and offer the user the chance to interrupt it (for debugging), or even terminate it.
        pin:
          type: boolean
          description: akes the resulting object to be either pinned (i.e., make sure the backend keeps a reference to the object, with the same ID as the evaluation that generated it), or discarded. Note that an asynchronous evaluations will forcely pin the resulting object. Otherwise, it might be collected by the GC before the client requests it.
        context:
          $ref: "#/components/schemas/evaluationContext"
        debug:
          type: boolean
          description: Forces the immediate suspension of the evaluation and creates a debugger on it, returing the ID of the created debugger.
        profile:
          type: boolean
          description: Creates a profiler and returns the ID of the created profiler to follow its progress and get its results when it finishes.

    evaluation:
      type: object
      description: An evaluation
      required: [id, expression, state]
      properties:
        id:
          type: string
          description: The evaluation ID
        expression:
          type: string
          description: The evaluation expression
        state:
          type: string
          enum: [pending, evaluating, paused, failed, cancelled, finished]
          description: The evaluation state
        error:
          $ref: "#/components/schemas/evaluationError"

    evaluationError:
      type: object
      description: An evaluation error
      required: [description, evaluation]
      properties:
        description:
          type: string
          description: Error description
        interval:
          type: object
          description: The interval where the error occurred
          properties:
            start:
              type: integer
              minimum: 1
              description: Start position
            end:
              type: integer
              minimum: 1
              description: End position
        evaluation:
          type: string
          description: The ID of the evaluation. This serves to create a debugger on the evaluation process
        stack:
          type: string
          description: Stack trace (only frame headers or labels) as separated lines (this could be used as a snapshot for the user before creating a debugger).
        suggestions:
          type: array
          items:
            $ref: "#/components/schemas/changeSuggestion"

    pinnedObject:
      allOf:
        - $ref: "#/components/schemas/object"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              description: Unique identifier for the pinned object

    namedSlot:
      allOf:
        - $ref: "#/components/schemas/object"
        - type: object
          required:
            - slot
          properties:
            slot:
              type: string
              description: Name of the slot

    indexedSlot:
      allOf:
        - $ref: "#/components/schemas/object"
        - type: object
          required:
            - slot
          properties:
            slot:
              type: number
              description: Index of the slot

    customView:
      type: object
      description: A custom view of an object
      required: [type, title]
      properties:
        type:
          type: string
          enum: [table, tree, source, html, json, markdown]
          description: View type
        title:
          type: string
          description: View title
      oneOf:
        - type: object
          description: Tree view with roots
          properties:
            type:
              type: string
              enum: [tree]
            title:
              type: string
            roots:
              type: array
              items:
                $ref: "#/components/schemas/customViewRoot"
          required: [type, title, roots]
          additionalProperties: false
        - type: object
          description: Table view with columns and rows
          properties:
            type:
              type: string
              enum: [table]
            title:
              type: string
            columns:
              type: array
              items:
                $ref: "#/components/schemas/tableColumn"
              description: Column definitions
            rows:
              type: array
              items:
                type: object
                description: Row data objects with properties matching column fields
              description: Table data rows as JSON objects
          required: [type, title, columns, rows]
          additionalProperties: false
        - type: object
          description: Code-based views (source, html, json, markdown)
          properties:
            type:
              type: string
              enum: [source, html, json, markdown]
            title:
              type: string
            code:
              type: string
              description: View code
          required: [type, title, code]
          additionalProperties: false
          example:
            type: "html"
            title: "My Fancy Html View"
            code: "<!DOCTYPE html><html><body><h1>My Fancy Html View</h1></body></html>"

    customViewRoot:
      type: object
      description: A tree of a custom view
      required: [label, children]
      additionalProperties: false
      properties:
        label:
          type: string
          description: Tree label
        children:
          type: array
          items:
            $ref: "#/components/schemas/customViewRoot"
      example:
        label: "root"
        children:
          - label: "child 1"
            children:
              - label: "subchild 1"
              - label: "subchild 2"
          - label: "child 2"
            children:
              - label: "subchild 3"

    tableColumn:
      type: object
      description: A table column definition
      required: [field, label]
      additionalProperties: false
      properties:
        field:
          type: string
          description: Field name in the row data objects
        label:
          type: string
          description: Display label for the column
        align:
          type: string
          enum: [left, center, right]
          description: Text alignment for the column
          default: left
      example:
        field: "key"
        label: "Key"
        align: "left"

    binding:
      type: object
      description: A variable binding in a frame
      properties:
        name:
          type: string
          description: Variable name
        value:
          type: string
          description: Variable value (printed representation)

    workspace:
      type: object
      description: A workspace
      required:
        - id
      properties:
        id:
          type: string
          description: Workspace ID
        name:
          type: string
          description: Workspace name
        source:
          type: string
          description: Workspace content

    debugger:
      type: object
      description: A debugger instance
      required:
        - id
        - description
      properties:
        id:
          type: string
          description: Debugger ID
        description:
          type: string
          description: Debugger description

    frame:
      type: object
      description: A stack frame in a debugger
      properties:
        index:
          type: number
          description: Frame index
        label:
          type: string
          description: Frame label
        class:
          $ref: "#/components/schemas/class"
          description: Class name
        method:
          $ref: "#/components/schemas/method"
          description: Method name
        interval:
          type: object
          properties:
            start:
              type: integer
              minimum: 1
              description: Start position
            end:
              type: integer
              minimum: 1
              description: End position
          description: Interval of the current AST node within the source code

    testSuite:
      type: object
      description: A test suite
      properties:
        name:
          type: string
          description: Test suite name
        packages:
          type: array
          items:
            type: string
          description: Package names to test
        classes:
          type: array
          items:
            type: string
          description: Class names to test
        methods:
          type: array
          items:
            type: object
            properties:
              class:
                type: string
                description: Method class name
              selector:
                type: string
                description: Method selector
          description: Method signatures to test

    testRun:
      type: object
      description: A test run
      required: [id, name]
      properties:
        id:
          type: string
          description: Test run ID
        results:
          type: object
          description: Test results

    testCase:
      type: object
      description: A test case
      properties:
        class:
          type: string
          description: Test class name
        selector:
          type: string
          description: Test selector
        time:
          type: number
          description: Test time

    testRunStatus:
      type: object
      description: A test run status
      required: [id, name]
      properties:
        id:
          type: string
          description: Test run ID
        name:
          type: string
          description: Test run name
        total:
          type: number
          description: Total number of tests
        running:
          type: boolean
          description: Whether the test run is running
        current:
          $ref: "#/components/schemas/testCase"
          description: Current test
        summary:
          type: object
          description: Test summary
          properties:
            run:
              type: number
              description: Number of tests run
            passed:
              type: number
              description: Number of tests passed
            failed:
              type: number
              description: Number of tests failed
            errors:
              type: number
              description: Number of tests with errors
            skipped:
              type: number
              description: Number of tests skipped
            knownIssues:
              type: number
              description: Number of tests with known issues
